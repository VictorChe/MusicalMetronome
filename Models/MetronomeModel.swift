import Foundation
import AVFoundation

class MetronomeModel: ObservableObject {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ç—Ä–æ–Ω–æ–º–∞
    @Published var tempo: Double = 90
    @Published var duration: Double = 20
    @Published var mode: TrainingMode = .tap

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä
    @Published var selectedRhythmPatterns: [RhythmPattern] = [.quarter, .eighthPair]
    @Published var currentPatterns: [RhythmPattern] = Array(repeating: .quarter, count: 4)

    // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
    @Published var latencyCompensation: Double = 0 // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ—Ç—Ä–æ–Ω–æ–º–∞
    @Published var isRunning = false
    @Published var isCountdown = false
    @Published var countdownCount = 4
    @Published var currentBeat = 0
    @Published var elapsedTime: Double = 0

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    @Published var perfectHits = 0
    @Published var goodHits = 0
    @Published var missedHits = 0
    @Published var skippedBeats = 0
    @Published var extraHits = 0

    // –ê—É–¥–∏–æ
    private var audioPlayer: AVAudioPlayer?
    private var timer: Timer?
    private var startTime: Date?

    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏–π (–≤ –¥–æ–ª—è—Ö –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –±–∏—Ç–∞–º–∏)
    private let perfectThresholdRatio = 0.05 // 5% –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π
    private let goodThresholdRatio = 0.15 // 15% –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π
    private let poorThresholdRatio = 0.3 // 30% –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –Ω–µ—Ç–æ—á–Ω—ã—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π
    private var lastHitBeat: Int = -1
    private var lastHitTime: TimeInterval = 0
    private var minimumTimeBetweenHits: TimeInterval { beatInterval * 0.25 } // 25% –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

    var beatInterval: TimeInterval {
        60.0 / tempo
    }

    var totalBeats: Int {
        Int(duration * tempo / 60.0)
    }

    var progress: Double {
        guard let startTime = startTime else { return 0 }
        return min(Date().timeIntervalSince(startTime) / duration, 1.0)
    }

    enum TrainingMode: String, CaseIterable, Identifiable {
        case tap = "–¢–∞–ø—ã"
        case microphone = "–ú–∏–∫—Ä–æ—Ñ–æ–Ω"
        var id: String { self.rawValue }
    }

    enum RhythmPattern: String, CaseIterable, Identifiable {
        case quarter = "–ß–µ—Ç–≤–µ—Ä—Ç—å"
        case quarterRest = "–ß–µ—Ç–≤–µ—Ä—Ç—å –ø–∞—É–∑–∞"
        case eighthPair = "–î–≤–µ –≤–æ—Å—å–º—ã—Ö"
        case eighthTriplet = "–¢—Ä–∏–æ–ª—å –≤–æ—Å—å–º—ã–º–∏"
        case restEighthNote = "–ü–∞—É–∑–∞ + –≤–æ—Å—å–º–∞—è"
        case eighthNoteRest = "–í–æ—Å—å–º–∞—è + –ø–∞—É–∑–∞"

        var id: String { self.rawValue }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –º–æ–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ—Ç—ã –≤ –¥–æ–ª—è—Ö –æ—Ç —Ü–µ–ª–æ–π –Ω–æ—Ç—ã
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥–≤—É—Ö –≤–æ—Å—å–º—ã—Ö —ç—Ç–æ –±—É–¥–µ—Ç [0, 0.5]
        var noteTimings: [Double] {
            switch self {
            case .quarter:
                return [0]
            case .quarterRest:
                return []
            case .eighthPair:
                return [0, 0.5]
            case .eighthTriplet:
                return [0, 0.33, 0.66]
            case .restEighthNote:
                return [0.5]
            case .eighthNoteRest:
                return [0]
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        var symbols: [String] {
            switch self {
            case .quarter:
                return ["‚ô©"]
            case .quarterRest:
                return ["ùÑΩ"]
            case .eighthPair:
                return ["‚ô™", "‚ô™"]
            case .eighthTriplet:
                return ["‚ô™", "‚ô™", "‚ô™"]
            case .restEighthNote:
                return ["ùÑΩ", "‚ô™"]
            case .eighthNoteRest:
                return ["‚ô™", "ùÑΩ"]
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    func updateRandomPattern(at position: Int) {
        guard position >= 0 && position < currentPatterns.count && !selectedRhythmPatterns.isEmpty else { return }

        let randomPattern = selectedRhythmPatterns.randomElement() ?? .quarter
        currentPatterns[position] = randomPattern
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    func initializeRandomPatterns() {
        guard !selectedRhythmPatterns.isEmpty else { return }

        for i in 0..<currentPatterns.count {
            let randomPattern = selectedRhythmPatterns.randomElement() ?? .quarter
            currentPatterns[i] = randomPattern
        }
    }

    init() {
        setupAudio()
    }

    private func setupAudio() {
        if let soundURL = Bundle.main.url(forResource: "metronome-click", withExtension: "wav") {
            do {
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞—É–¥–∏–æ –¥–≤–∏–∂–∫–æ–º
                let options: AVAudioSession.CategoryOptions = [.mixWithOthers, .allowBluetooth, .defaultToSpeaker]
                try AVAudioSession.sharedInstance().setCategory(.playAndRecord, mode: .default, options: options)
                try AVAudioSession.sharedInstance().setActive(true, options: .notifyOthersOnDeactivation)

                // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
                audioPlayer = try AVAudioPlayer(contentsOf: soundURL)
                audioPlayer?.prepareToPlay()
                audioPlayer?.volume = 1.0

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–≤—É–∫–æ–≤
                audioPlayer?.numberOfLoops = 0
                audioPlayer?.enableRate = false
            } catch {
                print("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –¥–ª—è –º–µ—Ç—Ä–æ–Ω–æ–º–∞: \(error)")
            }
        } else {
            print("–û—à–∏–±–∫–∞: –∞—É–¥–∏–æ —Ñ–∞–π–ª –º–µ—Ç—Ä–æ–Ω–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
    }

    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ—Ç—Ä–æ–Ω–æ–º–∞
    func cleanupResources() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        timer?.invalidate()
        timer = nil

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
        audioPlayer?.stop()

        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä, –Ω–æ –Ω–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é,
        // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
        audioPlayer = nil

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) { [weak self] in
            self?.setupAudio()
        }

        print("–†–µ—Å—É—Ä—Å—ã –º–µ—Ç—Ä–æ–Ω–æ–º–∞ –æ—á–∏—â–µ–Ω—ã")
    }

    func resetResults() {
        perfectHits = 0
        goodHits = 0
        missedHits = 0
        skippedBeats = 0
        extraHits = 0
        currentBeat = 0
        elapsedTime = 0
        lastHitBeat = -1
        lastHitTime = 0
        startTime = nil
        isRunning = false
        isCountdown = false

        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤—É–∫–∞
        cleanupResources()
    }

    func startMetronome() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        guard !isRunning && !isCountdown else {
            print("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
            return
        }

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ—Å—É—Ä—Å—ã —á–∏—Å—Ç—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        cleanupResources()

        // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        resetResults()
        isCountdown = true
        countdownCount = 4

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞
        if audioPlayer == nil {
            print("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
            setupAudio()
        }

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Ç–∏–∫
        playTick()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –º–µ—Ç—Ä–æ–Ω–æ–º–∞
        timer = Timer.scheduledTimer(withTimeInterval: beatInterval, repeats: true) { [weak self] _ in
            guard let self = self else { return }

            if self.isCountdown {
                self.countdownCount -= 1
                if self.countdownCount > 0 {
                    self.playTick()
                } else {
                    self.isCountdown = false
                    self.isRunning = true
                    self.startTime = Date()
                    self.playTick()
                }
            } else if self.isRunning {
                if let startTime = self.startTime {
                    self.elapsedTime = Date().timeIntervalSince(startTime)
                }
                self.currentBeat += 1
                self.playTick()

                if self.currentBeat >= self.totalBeats {
                    self.stopMetronome()
                }
            }
        }

        print("–ú–µ—Ç—Ä–æ–Ω–æ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    }

    func stopMetronome() {
        isRunning = false
        isCountdown = false
        timer?.invalidate()
        timer = nil
        calculateSkippedBeats()

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        audioPlayer?.stop()
        lastDetectedAudioTime = nil

        print("–ú–µ—Ç—Ä–æ–Ω–æ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–≤—è–∑—å —Å –∞—É–¥–∏–æ–¥–≤–∏–∂–∫–æ–º, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –µ–≥–æ —Ä–∞–±–æ—Ç—É
        // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
        let engine = audioEngine
        audioEngine = nil

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∞—É–¥–∏–æ —Å–µ—Å—Å–∏–∏
        DispatchQueue.global(qos: .userInitiated).asyncAfter(deadline: .now() + 0.2) {
            engine?.stopMonitoring()
        }
    }

    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ-–¥–≤–∏–∂–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª–∏–∫–∞—Ö
    var audioEngine: AudioEngine?

    private func playTick() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        guard let player = audioPlayer else {
            print("–ü–ª–µ–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º")
            setupAudio()
            return
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫, –µ—Å–ª–∏ –æ–Ω –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
        if player.isPlaying {
            player.stop()
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–≤—É–∫
        player.currentTime = 0

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫
        if !player.play() {
            print("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –º–µ—Ç—Ä–æ–Ω–æ–º–∞")

            // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
            setupAudio()
            audioPlayer?.play()
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞—É–¥–∏–æ-–¥–≤–∏–∂–æ–∫ –æ –∫–ª–∏–∫–µ –º–µ—Ç—Ä–æ–Ω–æ–º–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç—Ö–∞
        if let audioEngine = audioEngine {
            audioEngine.notifyMetronomeClick()
        }
    }

    var viewCallback: (() -> Void)?

    func handleTap() {
        guard isRunning else { return }

        let currentTime = Date().timeIntervalSince1970

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞
        guard let startTime = startTime else { return }
        let actualElapsed = Date().timeIntervalSince(startTime)

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –Ω–∞ –∫–∞–∫–æ–º –º—ã —Å–µ–π—á–∞—Å –±–∏—Ç–µ –∏ –∫–∞–∫–æ–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        let exactBeatPosition = actualElapsed / beatInterval  // –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –±–∏—Ç–∞—Ö
        let nearestBeatNumber = round(exactBeatPosition)      // –ë–ª–∏–∂–∞–π—à–∏–π —Ü–µ–ª—ã–π –±–∏—Ç

        // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –¥–æ–ª—è—Ö –±–∏—Ç–∞ (–æ—Ç 0 –¥–æ 0.5)
        let beatDeviation = abs(exactBeatPosition - nearestBeatNumber)
        // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        let timeDeviation = beatDeviation * beatInterval

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        let currentPatternIndex = (Int(nearestBeatNumber) - 1) % 4
        let currentPattern = currentPatterns[currentPatternIndex]
        
        print("–¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: \(exactBeatPosition), –ë–ª–∏–∂–∞–π—à–∏–π –±–∏—Ç: \(nearestBeatNumber), –¢–µ–∫—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: \(currentPattern.rawValue), –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –¥–æ–ª—è—Ö: \(beatDeviation), –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: \(timeDeviation)")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏
        // –î–ª—è –≤–æ—Å—å–º—ã—Ö –Ω–æ—Ç —É–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        let isEighthPattern = currentPattern == .eighthPair || currentPattern == .eighthTriplet
        
        let adjustedMinimumTime = isEighthPattern ? minimumTimeBetweenHits * 0.5 : minimumTimeBetweenHits
        
        if currentTime - lastHitTime < adjustedMinimumTime {
            extraHits += 1
            print("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –Ω–∞–∂–∞—Ç–∏–µ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: \(currentTime - lastHitTime), –º–∏–Ω–∏–º—É–º: \(adjustedMinimumTime))")
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –±–∏—Ç
        // –î–ª—è –≤–æ—Å—å–º—ã—Ö –¥–æ–ø—É—Å–∫–∞–µ–º –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –±–∏—Ç
        if Int(nearestBeatNumber) == lastHitBeat && !isEighthPattern {
            extraHits += 1
            print("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ç–æ—Ç –∂–µ –±–∏—Ç")
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—É—â–µ–º—É —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
        let intBeat = Int(nearestBeatNumber)
        let beatInPattern = intBeat % 4 // –ö–∞–∫–æ–π –±–∏—Ç –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ (0-3)

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        let patternIndex = beatInPattern == 0 ? 3 : beatInPattern - 1
        let pattern = currentPatterns[patternIndex]

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –∑–≤—É–∫ –≤ –¥–∞–Ω–Ω–æ–º –º–æ–º–µ–Ω—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        // –ü–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –±–∏—Ç–∞ (0-1)
        let positionInBeat = exactBeatPosition - floor(exactBeatPosition)

        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π timing –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ
        var shouldHaveNote = false
        var closestDistance = 1.0
        var closestTiming = 0.0

        for timing in pattern.noteTimings {
            let distance = abs(positionInBeat - timing)
            if distance < closestDistance {
                closestDistance = distance
                closestTiming = timing
                shouldHaveNote = true
            }
        }

        // –ï—Å–ª–∏ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ –Ω–µ—Ç –Ω–æ—Ç, —Ç–æ –ø–∞—É–∑–∞
        if pattern.noteTimings.isEmpty {
            shouldHaveNote = false
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–≤–µ –≤–æ—Å—å–º—ã–µ, –Ω–µ –ø–æ–ø–∞–¥–∞–µ–º –ª–∏ –º—ã –≤–æ –≤—Ç–æ—Ä—É—é –≤–æ—Å—å–º—É—é
        if pattern == .eighthPair && positionInBeat >= 0.4 && positionInBeat <= 0.6 {
            // –≠—Ç–æ –≤—Ç–æ—Ä–∞—è –≤–æ—Å—å–º–∞—è –Ω–æ—Ç–∞ –≤ –ø–∞—Ä–µ
            shouldHaveNote = true
            closestDistance = abs(positionInBeat - 0.5) // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤—Ç–æ—Ä–æ–π –≤–æ—Å—å–º–æ–π (0.5)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏ –±–∏—Ç
        lastHitTime = currentTime
        lastHitBeat = intBeat

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω –±–µ–∑ –Ω–æ—Ç (–ø–∞—É–∑–∞) –∏–ª–∏ –º—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–∏–Ω timing
        if !shouldHaveNote || closestDistance > poorThresholdRatio {
            extraHits += 1
            print("–ù–æ—Ç–∞ –º–∏–º–æ: \(beatDeviation) - –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É \(pattern.rawValue)")
            return
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –¥–æ–ª—è—Ö
        print("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –¥–æ–ª—è—Ö –±–∏—Ç–∞ –æ—Ç —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: \(closestDistance)")

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
        if closestDistance <= perfectThresholdRatio {
            perfectHits += 1
            print("–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: \(closestDistance)")
        } else if closestDistance <= goodThresholdRatio {
            goodHits += 1
            print("–•–æ—Ä–æ—à–µ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: \(closestDistance)")
        } else if closestDistance <= poorThresholdRatio {
            missedHits += 1
            print("–ù–µ—Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: \(closestDistance)")
        } else {
            extraHits += 1
            print("–ù–æ—Ç–∞ –º–∏–º–æ: \(closestDistance)")
        }

        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ò–¥–µ–∞–ª—å–Ω—ã–µ: \(perfectHits), –•–æ—Ä–æ—à–∏–µ: \(goodHits), –ù–µ—Ç–æ—á–Ω—ã–µ: \(missedHits), –ú–∏–º–æ: \(extraHits)")
        viewCallback?()
    }

    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–ø–∞–¥–∞–Ω–∏–π
    private var lastDetectedAudioTime: Date?
    private let minimumAudioDetectionInterval: TimeInterval = 0.15 // 150 –º—Å

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ "–º–∏–º–æ" –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
    private let maxExtraHitsPerTraining = 30

    func handleAudioInput(intensity: Double) {
        guard isRunning else { return }

        let currentTime = Date().timeIntervalSince1970

        // –°–∏—Å—Ç–µ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ–±—â–µ–π –∑–∞–¥–µ—Ä–∂–∫–µ

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞
        guard let startTime = startTime else {
            print("–û—à–∏–±–∫–∞: startTime –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∞—É–¥–∏–æ —Å–æ–±—ã—Ç–∏–π
        if let lastAudioTime = lastDetectedAudioTime,
           Date().timeIntervalSince(lastAudioTime) < minimumAudioDetectionInterval {
            print("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–≥–æ –∞—É–¥–∏–æ—Å–æ–±—ã—Ç–∏—è")
            return
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—É–¥–∏–æ—Å–æ–±—ã—Ç–∏—è
        lastDetectedAudioTime = Date()

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ç "–º–∏–º–æ" –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        if extraHits >= maxExtraHitsPerTraining {
            print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ç '–º–∏–º–æ', –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è")
            return
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –ø–ª—é—Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        let baseDelay = 0.075 // 75 –º—Å - –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
        let userLatencyCompensation = latencyCompensation / 1000.0 // –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ –º—Å –≤ —Å–µ–∫—É–Ω–¥—ã
        let totalDelay = baseDelay + userLatencyCompensation

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –æ–±—â–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        let actualElapsed = Date().timeIntervalSince(startTime) - totalDelay

        print("–ü—Ä–∏–º–µ–Ω—è–µ–º–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: \(totalDelay) —Å–µ–∫ (–±–∞–∑–æ–≤–∞—è: \(baseDelay) + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è: \(userLatencyCompensation))")

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –Ω–∞ –∫–∞–∫–æ–º –º—ã —Å–µ–π—á–∞—Å –±–∏—Ç–µ –∏ –∫–∞–∫–æ–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        let exactBeatPosition = actualElapsed / beatInterval
        let nearestBeatNumber = round(exactBeatPosition)

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        let intBeat = Int(nearestBeatNumber)
        let beatInPattern = intBeat % 4 // –ö–∞–∫–æ–π –±–∏—Ç –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ (0-3)

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        let patternIndex = beatInPattern == 0 ? 3 : beatInPattern - 1
        let pattern = currentPatterns[patternIndex]

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –∑–≤—É–∫ –≤ –¥–∞–Ω–Ω–æ–º –º–æ–º–µ–Ω—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        // –ü–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –±–∏—Ç–∞ (0-1)
        let positionInBeat = exactBeatPosition - floor(exactBeatPosition)

        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π timing –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ
        var shouldHaveNote = false
        var closestDistance = 1.0

        for timing in pattern.noteTimings {
            let distance = abs(positionInBeat - timing)
            if distance < closestDistance {
                closestDistance = distance
                shouldHaveNote = true
            }
        }

        // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        let microAdjustment = 2.5 // –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤

        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Å–æ–≤—Å–µ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–≤—É–∫–∞, —ç—Ç–æ —è–≤–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
        if currentTime - lastHitTime < (minimumTimeBetweenHits * 0.5) {
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–≤—É–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: \(currentTime - lastHitTime)c")
            return // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        }

        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –±–∏—Ç, —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ, –Ω–æ –ø—Ä–æ—à–ª–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
        if Int(nearestBeatNumber) == lastHitBeat && currentTime - lastHitTime < beatInterval * 0.7 {
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–≤—É–∫ –¥–ª—è –±–∏—Ç–∞ \(nearestBeatNumber)")
            return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–æ–º –∂–µ –±–∏—Ç–µ
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –±–∏—Ç–æ–≤
        if nearestBeatNumber < 1 || nearestBeatNumber > Double(totalBeats) {
            print("–ë–∏—Ç \(nearestBeatNumber) –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-\(totalBeats)")
            return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–æ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        }

        // –ï—Å–ª–∏ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ –Ω–µ—Ç –Ω–æ—Ç, —Ç–æ –ø–∞—É–∑–∞
        if pattern.noteTimings.isEmpty {
            shouldHaveNote = false
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏ –±–∏—Ç
        lastHitTime = currentTime
        lastHitBeat = intBeat

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω –±–µ–∑ –Ω–æ—Ç (–ø–∞—É–∑–∞) –∏–ª–∏ –º—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–∏–Ω timing
        // –î–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏
        let adjustedThreshold = poorThresholdRatio * microAdjustment
        if !shouldHaveNote || closestDistance > adjustedThreshold {
            extraHits += 1
            print("–ù–æ—Ç–∞ –º–∏–º–æ: \(closestDistance) - –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É \(pattern.rawValue)")
            viewCallback?()
            return
        }

        print("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –¥–æ–ª—è—Ö –±–∏—Ç–∞ –æ—Ç —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: \(closestDistance)")

        // –î–ª—è —Ä–µ–∂–∏–º–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏
        let adjustedPerfectThreshold = perfectThresholdRatio * microAdjustment
        let adjustedGoodThreshold = goodThresholdRatio * microAdjustment
        let adjustedPoorThreshold = poorThresholdRatio * microAdjustment

        if closestDistance <= adjustedPerfectThreshold {
            perfectHits += 1
            print("–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: \(closestDistance) (–ø–æ—Ä–æ–≥: \(adjustedPerfectThreshold))")
        } else if closestDistance <= adjustedGoodThreshold {
            goodHits += 1
            print("–•–æ—Ä–æ—à–µ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: \(closestDistance) (–ø–æ—Ä–æ–≥: \(adjustedGoodThreshold))")
        } else if closestDistance <= adjustedPoorThreshold {
            missedHits += 1
            print("–ù–µ—Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: \(closestDistance) (–ø–æ—Ä–æ–≥: \(adjustedPoorThreshold))")
        } else {
            extraHits += 1
            print("–ù–æ—Ç–∞ –º–∏–º–æ: \(closestDistance) (–≤—ã—à–µ –ø–æ—Ä–æ–≥–∞: \(adjustedPoorThreshold))")
        }

        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ò–¥–µ–∞–ª—å–Ω—ã–µ: \(perfectHits), –•–æ—Ä–æ—à–∏–µ: \(goodHits), –ù–µ—Ç–æ—á–Ω—ã–µ: \(missedHits), –ú–∏–º–æ: \(extraHits)")
        viewCallback?()
    }

    func calculateSkippedBeats() {
        let totalHits = perfectHits + goodHits + missedHits
        skippedBeats = max(0, totalBeats - totalHits)
    }
}